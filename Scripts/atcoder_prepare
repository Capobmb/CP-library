#!/usr/bin/env bash

# おまじない
set -euo pipefail

# Color codes for logging
readonly RED='\033[0;31m'
readonly YELLOW='\033[0;33m'
readonly CYAN='\033[0;36m'
readonly NC='\033[0m' # No Color

function log_info() {
    echo -e "${CYAN}INFO:${NC} $*" >&2
}

function log_warn() {
    echo -e "${YELLOW}WARNING: $*${NC}" >&2
}

function log_error() {
    echo -e "${RED}ERROR: $*${NC}" >&2
}

function assert_dependency() {
    local cmd="$1"

    if ! command -v "${cmd}" &>/dev/null; then
        log_error "${cmd} is required for this script but not installed." >&2
        exit 1
    fi
}

function codeopen_tooldir() {
    local workspace_dir="$1"

    # Ensure path ends with /
    [[ "${workspace_dir}" != */ ]] && workspace_dir="${workspace_dir}/"

    for directory in "${workspace_dir}"*/; do
        local cppfile="${directory}main.cpp"
        if [[ ! -f "${cppfile}" ]]; then
            log_warn "main.cpp does not exist for directory \"$(basename "${directory}")\". Skipping opening cpp file with default editor."
            continue
        fi

        open "${cppfile}"
    done
}

function browseropen_tooldir() {
    local workspace_dir="$1"
    local contest_id
    contest_id="$(basename "${workspace_dir}")"

    # Ensure path ends with /
    if [[ "${workspace_dir}" != */ ]]; then
        workspace_dir="${workspace_dir}/"
    fi

    for directory in "${workspace_dir}"*/; do
        local metadata="${directory}metadata.json"
        if [[ ! -f "${metadata}" ]]; then
            log_warn "metadata.json for directory \"$(basename "${directory}")\" doesn't exist. Skipping opening problem."
            continue
        fi

        local problem_id
        problem_id="$(jq -r '.problem.problem_id' "${metadata}" 2>/dev/null)"
        if [[ $? -ne 0 || "${problem_id}" == "null" ]]; then
            log_warn "Failed to get problem ID for \"$(basename "${directory}")\". Skipping opening problem."
            continue
        fi

        local url="https://atcoder.jp/contests/${contest_id}/tasks/${problem_id}"
        open "${url}"
        log_info "Opened ${url} for problem \"$(basename "${directory}")\"."
        # sleep to avoid too many requests
        sleep 0.2
    done
}

function atcoder_prepare() {
    assert_dependency "atcoder-tools"
    assert_dependency "open"
    assert_dependency "jq"

    if [[ $# -ne 1 ]]; then
        log_error "Usage: ${FUNCNAME[0]} <contest_id>"
        return 1
    fi

    local contest_id="$1"
    local atcoder_tools_workspace="${ATCODER_TOOLS_WORKSPACE:-"~/atcoder-workspace/"}"

    if [[ ! -d "${atcoder_tools_workspace}" ]]; then
        log_error "atcoder-tools workspace is set to \"${atcoder_tools_workspace}\" but is not a directory."
        return 1
    fi

    atcoder-tools gen --skip-existing-problems "${contest_id}"

    local contest_workspace="${atcoder_tools_workspace}/${contest_id}"

    log_info "Contest workspace directory is ${contest_workspace}"

    # open main.cpp s in code
    codeopen_tooldir "${contest_workspace}"

    # to avoid too many requests error
    local sleeping_time=1
    log_info "Sleeping for ${sleeping_time} to avoid too many requests error"
    sleep "${sleeping_time}"

    # open problems
    browseropen_tooldir "${contest_workspace}"

    log_info "You could change your directory by executing the following: \n cd ${contest_workspace}"
}

# Main execution
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    atcoder_prepare "$@"
fi
